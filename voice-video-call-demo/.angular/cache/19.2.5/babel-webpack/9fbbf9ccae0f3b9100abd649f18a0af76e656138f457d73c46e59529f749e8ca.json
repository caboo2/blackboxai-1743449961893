{"ast":null,"code":"import _asyncToGenerator from \"/project/sandbox/user-workspace/voice-video-call-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _CallService;\nimport { VoiceVideoCall } from 'capacitor-voice-video-call';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class CallService {\n  constructor() {\n    this.callState = new BehaviorSubject({\n      isInCall: false,\n      isMuted: false,\n      isVideoEnabled: true,\n      isScreenSharing: false,\n      participants: []\n    });\n    this.initializePlugin();\n    this.setupCallListeners();\n  }\n  initializePlugin() {\n    return _asyncToGenerator(function* () {\n      try {\n        yield VoiceVideoCall.initialize({\n          easyrtc: environment.easyrtc,\n          onesignal: environment.onesignal\n        });\n        console.log('VoiceVideoCall plugin initialized successfully');\n      } catch (error) {\n        console.error('Failed to initialize VoiceVideoCall plugin:', error);\n      }\n    })();\n  }\n  setupCallListeners() {\n    VoiceVideoCall.onCallReceived(callData => {\n      // Show incoming call UI\n      console.log('Incoming call from:', callData.callerId);\n    });\n    VoiceVideoCall.onCallEnded(() => {\n      this.updateCallState({\n        isInCall: false\n      });\n    });\n    VoiceVideoCall.onParticipantJoined(participant => {\n      const currentState = this.callState.value;\n      this.updateCallState({\n        participants: [...currentState.participants, participant.id]\n      });\n    });\n    VoiceVideoCall.onParticipantLeft(participantId => {\n      const currentState = this.callState.value;\n      this.updateCallState({\n        participants: currentState.participants.filter(id => id !== participantId)\n      });\n    });\n  }\n  getCallState() {\n    return this.callState.asObservable();\n  }\n  updateCallState(newState) {\n    this.callState.next({\n      ...this.callState.value,\n      ...newState\n    });\n  }\n  startCall(receiverId, isVideoCall = true) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield VoiceVideoCall.startCall({\n          roomId: `room-${Date.now()}`,\n          callType: isVideoCall ? 'video' : 'audio',\n          receiverId,\n          metadata: {\n            callerName: 'User' // Replace with actual user name\n          }\n        });\n        _this.updateCallState({\n          isInCall: true,\n          isVideoEnabled: isVideoCall\n        });\n      } catch (error) {\n        console.error('Failed to start call:', error);\n        throw error;\n      }\n    })();\n  }\n  acceptCall(roomId, callerId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield VoiceVideoCall.acceptCall({\n          roomId,\n          callerId\n        });\n        _this2.updateCallState({\n          isInCall: true\n        });\n      } catch (error) {\n        console.error('Failed to accept call:', error);\n        throw error;\n      }\n    })();\n  }\n  rejectCall(roomId, callerId) {\n    return _asyncToGenerator(function* () {\n      try {\n        yield VoiceVideoCall.rejectCall({\n          roomId,\n          callerId\n        });\n      } catch (error) {\n        console.error('Failed to reject call:', error);\n        throw error;\n      }\n    })();\n  }\n  endCall() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield VoiceVideoCall.endCall();\n        _this3.updateCallState({\n          isInCall: false\n        });\n      } catch (error) {\n        console.error('Failed to end call:', error);\n        throw error;\n      }\n    })();\n  }\n  toggleAudio() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const isMuted = _this4.callState.value.isMuted;\n        if (isMuted) {\n          yield VoiceVideoCall.unmuteAudio();\n        } else {\n          yield VoiceVideoCall.muteAudio();\n        }\n        _this4.updateCallState({\n          isMuted: !isMuted\n        });\n      } catch (error) {\n        console.error('Failed to toggle audio:', error);\n        throw error;\n      }\n    })();\n  }\n  toggleVideo() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const isVideoEnabled = _this5.callState.value.isVideoEnabled;\n        if (isVideoEnabled) {\n          yield VoiceVideoCall.muteVideo();\n        } else {\n          yield VoiceVideoCall.unmuteVideo();\n        }\n        _this5.updateCallState({\n          isVideoEnabled: !isVideoEnabled\n        });\n      } catch (error) {\n        console.error('Failed to toggle video:', error);\n        throw error;\n      }\n    })();\n  }\n  toggleScreenShare() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const isScreenSharing = _this6.callState.value.isScreenSharing;\n        if (isScreenSharing) {\n          yield VoiceVideoCall.stopScreenShare();\n        } else {\n          yield VoiceVideoCall.startScreenShare({\n            audio: true\n          });\n        }\n        _this6.updateCallState({\n          isScreenSharing: !isScreenSharing\n        });\n      } catch (error) {\n        console.error('Failed to toggle screen share:', error);\n        throw error;\n      }\n    })();\n  }\n  switchCamera() {\n    return _asyncToGenerator(function* () {\n      try {\n        yield VoiceVideoCall.switchCamera();\n      } catch (error) {\n        console.error('Failed to switch camera:', error);\n        throw error;\n      }\n    })();\n  }\n}\n_CallService = CallService;\n_CallService.ɵfac = function CallService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _CallService)();\n};\n_CallService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _CallService,\n  factory: _CallService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["VoiceVideoCall","BehaviorSubject","environment","CallService","constructor","callState","isInCall","isMuted","isVideoEnabled","isScreenSharing","participants","initializePlugin","setupCallListeners","_asyncToGenerator","initialize","easyrtc","onesignal","console","log","error","onCallReceived","callData","callerId","onCallEnded","updateCallState","onParticipantJoined","participant","currentState","value","id","onParticipantLeft","participantId","filter","getCallState","asObservable","newState","next","startCall","receiverId","isVideoCall","_this","roomId","Date","now","callType","metadata","callerName","acceptCall","_this2","rejectCall","endCall","_this3","toggleAudio","_this4","unmuteAudio","muteAudio","toggleVideo","_this5","muteVideo","unmuteVideo","toggleScreenShare","_this6","stopScreenShare","startScreenShare","audio","switchCamera","factory","ɵfac","providedIn"],"sources":["/project/sandbox/user-workspace/voice-video-call-demo/src/app/services/call.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { VoiceVideoCall } from 'capacitor-voice-video-call';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface CallState {\n  isInCall: boolean;\n  isMuted: boolean;\n  isVideoEnabled: boolean;\n  isScreenSharing: boolean;\n  participants: string[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CallService {\n  private callState = new BehaviorSubject<CallState>({\n    isInCall: false,\n    isMuted: false,\n    isVideoEnabled: true,\n    isScreenSharing: false,\n    participants: []\n  });\n\n  constructor() {\n    this.initializePlugin();\n    this.setupCallListeners();\n  }\n\n  private async initializePlugin() {\n    try {\n      await VoiceVideoCall.initialize({\n        easyrtc: environment.easyrtc,\n        onesignal: environment.onesignal\n      });\n      console.log('VoiceVideoCall plugin initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize VoiceVideoCall plugin:', error);\n    }\n  }\n\n  private setupCallListeners() {\n    VoiceVideoCall.onCallReceived((callData: any) => {\n      // Show incoming call UI\n      console.log('Incoming call from:', callData.callerId);\n    });\n\n    VoiceVideoCall.onCallEnded(() => {\n      this.updateCallState({ isInCall: false });\n    });\n\n    VoiceVideoCall.onParticipantJoined((participant: any) => {\n      const currentState = this.callState.value;\n      this.updateCallState({\n        participants: [...currentState.participants, participant.id]\n      });\n    });\n\n    VoiceVideoCall.onParticipantLeft((participantId: string) => {\n      const currentState = this.callState.value;\n      this.updateCallState({\n        participants: currentState.participants.filter(id => id !== participantId)\n      });\n    });\n  }\n\n  getCallState(): Observable<CallState> {\n    return this.callState.asObservable();\n  }\n\n  private updateCallState(newState: Partial<CallState>) {\n    this.callState.next({\n      ...this.callState.value,\n      ...newState\n    });\n  }\n\n  async startCall(receiverId: string, isVideoCall: boolean = true) {\n    try {\n      await VoiceVideoCall.startCall({\n        roomId: `room-${Date.now()}`,\n        callType: isVideoCall ? 'video' : 'audio',\n        receiverId,\n        metadata: {\n          callerName: 'User' // Replace with actual user name\n        }\n      });\n      this.updateCallState({ \n        isInCall: true,\n        isVideoEnabled: isVideoCall\n      });\n    } catch (error) {\n      console.error('Failed to start call:', error);\n      throw error;\n    }\n  }\n\n  async acceptCall(roomId: string, callerId: string) {\n    try {\n      await VoiceVideoCall.acceptCall({ roomId, callerId });\n      this.updateCallState({ isInCall: true });\n    } catch (error) {\n      console.error('Failed to accept call:', error);\n      throw error;\n    }\n  }\n\n  async rejectCall(roomId: string, callerId: string) {\n    try {\n      await VoiceVideoCall.rejectCall({ roomId, callerId });\n    } catch (error) {\n      console.error('Failed to reject call:', error);\n      throw error;\n    }\n  }\n\n  async endCall() {\n    try {\n      await VoiceVideoCall.endCall();\n      this.updateCallState({ isInCall: false });\n    } catch (error) {\n      console.error('Failed to end call:', error);\n      throw error;\n    }\n  }\n\n  async toggleAudio() {\n    try {\n      const isMuted = this.callState.value.isMuted;\n      if (isMuted) {\n        await VoiceVideoCall.unmuteAudio();\n      } else {\n        await VoiceVideoCall.muteAudio();\n      }\n      this.updateCallState({ isMuted: !isMuted });\n    } catch (error) {\n      console.error('Failed to toggle audio:', error);\n      throw error;\n    }\n  }\n\n  async toggleVideo() {\n    try {\n      const isVideoEnabled = this.callState.value.isVideoEnabled;\n      if (isVideoEnabled) {\n        await VoiceVideoCall.muteVideo();\n      } else {\n        await VoiceVideoCall.unmuteVideo();\n      }\n      this.updateCallState({ isVideoEnabled: !isVideoEnabled });\n    } catch (error) {\n      console.error('Failed to toggle video:', error);\n      throw error;\n    }\n  }\n\n  async toggleScreenShare() {\n    try {\n      const isScreenSharing = this.callState.value.isScreenSharing;\n      if (isScreenSharing) {\n        await VoiceVideoCall.stopScreenShare();\n      } else {\n        await VoiceVideoCall.startScreenShare({ audio: true });\n      }\n      this.updateCallState({ isScreenSharing: !isScreenSharing });\n    } catch (error) {\n      console.error('Failed to toggle screen share:', error);\n      throw error;\n    }\n  }\n\n  async switchCamera() {\n    try {\n      await VoiceVideoCall.switchCamera();\n    } catch (error) {\n      console.error('Failed to switch camera:', error);\n      throw error;\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}